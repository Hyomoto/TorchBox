Tinder      <- ( Line )*

Line        <- ( whitespace ) newline?

whitespace  <- '[ \t]*'
newline     <- '\r?\n'
#exit
newline  <- ( expression / operation / comparison / condition / Group ) newline?
ws          = ~"[ \t]*"
emptyline   = ws+
newline     = ~"\r?\n"

expression  = keyword

keyword     = ( Write / Set / Call / flow )
Call        = "call" ws Lookup ws Group
Write       = "write" ws ((identifier ws String) / String) (ws constants)?
Set         = "set" ws identifier ws value

flow        = ( Jump / Goto / Stop / Input )
Input       = "input" ws ((identifier ws String) / String)
Jump        = "jump" ws ( identifier / Number ) (ws ( ("`" condition) / nil ))?
Goto        = "#" ws identifier
Stop        = "stop"

operation   = ( Add / Subtract / Max / Min )
Add         = "add" ws Group
Subtract    = "subtract" ws Group
Max         = "max" ws Group
Min         = "min" ws Group

comparison  = ( Less / Greater / Equal )
Less        = "less" ws value ws value
Greater     = "greater" ws value ws value
Equal       = "equal" ws value ws value

condition   = ( From / And / Or / In / If / Not )
From        = "from" ws identifier ws Group
And         = "and" ws Group
Or          = "or" ws Group
In          = "in" ws Group
If          = "if" ws value
Not         = "not" ws value

Group       = ( value )* value nil?
value       = ( constants / Number / identifier / function )
function    = "`" ( Call / operation / comparison / condition )
identifier  = ( Redirect / Lookup / String )
Redirect    = "@" Lookup
Lookup      = ~"[a-zA-Z_][a-zA-Z0-9_]*(\\.[a-zA-Z_][a-zA-Z0-9_]*)*"
String      = ~'"[^"]*"'
Number      = ~"-?[0-9]+(\\.[0-9]+)?"

constants   = ( True / False )
True        = "True"
False       = "False"
nil         = "Nil"
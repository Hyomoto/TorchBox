Line        -> ( Rule / Comment / Newline )

ws          <- ~'[ \\t]' # ' ' or '\t'
Comment     -- "//" ~'[^\n]*'

Rule        -> Expression Newline
Newline     -- ~'\n|\r\n|\r' # newline

Expression  -> Keyword / Goto
Keyword     -> keyword / flow

Identifier  -> Redirect / Lookup / String

keyword     -> Write / Set / Call / flow
Call        <- "call" Lookup Group
Write       <- "write" Group
Set         <- "set" Identifier value

flow        -> Jump / Goto / Stop / Input
Input       <- "input" Group
Jump        <- "jump" ( Identifier / Number ) ( "`" condition )?
Goto        <- "#" Lookup
Stop        <- "stop"

operation   -> From / Add / Subtract / Max / Min
From        <- "from" ( function / Identifier ) Group
Add         <- "add" Group
Subtract    <- "subtract" Group
Max         <- "max" Group
Min         <- "min" Group

condition   -> And / Or / In / If / Not / Less / Greater / Equal
And         <- "and" Group
Or          <- "or" Group
In          <- "in" ( function / Identifier ) Group
If          <- "if" value
Not         <- "not" value
Less        <- "less" value value
Greater     <- "greater" value value
Equal       <- "equal" value value

Group       -> (!Nil value)+ Nil?
value       -> constants / Number / Identifier / function
function    -> "`" Call / operation / condition

Redirect    <- "@" Lookup
Lookup      <- ~"[a-zA-Z_][a-zA-Z0-9_]*(\\.[a-zA-Z_][a-zA-Z0-9_]*)*"
String      <- ~'"(?:[^"\\]|\\.)*"'
Number      <- ~"-?[0-9]+(\\.[0-9]+)?"

constants   -> True / False / Nil
True        <- "True"
False       <- "False"
Nil         -- "Nil"
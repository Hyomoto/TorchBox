Line         -> ( Rule / Newline )
Newline      -- ~'\n|\r\n|\r' # newline

Rule         -> ( Comment / From / Import / Const / Interrupt / Goto / Statement ) Newline
From         <- "from" Identifier "import" Identifier ( "," Identifier )*
Import       <- "import" Identifier ( "as" Identifier )?
Interrupt    <- "catch" String "at"? Identifier
Comment      -- "``" ~'[^\n]*'
Goto         <- "#" Identifier ( "else" Identifier )?
Const        <- "const" Identifier ( "is" / "=" ) ( Expression )
Statement    <- Keyword Condition? Comment?

Keyword      -> Write / Call / Put / Set / Inc / Dec / Swap / Input / Yield / Stop / Jump / Return
Put          <- "put" Expression ( "Before" / "After" ) Identifier
Set          <- "set" Identifier (( "to" )? Expression )?
Inc          <- "inc" Identifier Expression?
Dec          <- "dec" Identifier Expression?
Swap         <- "swap" Identifier ","? Identifier
Input        <- "input" Expression ( "to" Identifier )?
Write        <- ( String / "write" Expression ) ( "to" Identifier )?
Yield        <- "yield" ( Expression)?
Stop         <- "stop"
Jump         <- "jump" ( "to" )? Expression
Call         <- "call" Function
Return       <- "return"

Condition    <- "if" Expression
Expression   -> Indirect / Access
Indirect     <- "@" Access
Access       ~> Or (( In / FromSymbol / At ) ( Access ))?
Or           ~> And ( or And )*
And          ~> Binary ( and Binary )*
Binary       ~> Unary (( EqualEqual / BangEqual / LeftAngleBracketEqual / RightAngleBracketEqual / LeftAngleBracket / RightAngleBracket / Times / SlashSlash / Slash / Plus / Minus ) Unary)*
Unary        ~> ( Bang / Minus )? Primary
Primary      -> Constant / String / Number / Function / Identifier / Table / Array / Group

Lookup       -> Identifier / Indirect
Group        -> "(" Access ")"
Array        <- "[" Arguments ","? "]"
Table        <- "{" KeyValuePair ( "," KeyValuePair )* ","? "}"
KeyValuePair <- Identifier (":" Access)?
Constant     <> True / False
True         <- "True"
False        <- "False"
Function     <- Identifier "(" Arguments? ")"
ws           -- ~'[ \\t]+' # ' ' or '\t'
Arguments    -> Access ( "," Access )* 

Identifier   <- ~"[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)*"
String       <> ~'"(?:[^"\\]|\\.)*"' / ~"'(?:[^'\\]|\\.)*'"
Number       <- ~"-?[0-9]+(\\.[0-9]+)?"
[EqualEqual] <- ws? "==" ws? / ws "is" ws
[BangEqual]  <- ws? "!=" ws? / ws "is not" ws
LeftAngleBracketEqual  <- "<="
RightAngleBracketEqual <- ">="
[LeftAngleBracket]     <- ws? "<" ws? / ws "less than" ws
[RightAngleBracket]    <- ws? ">" ws? / ws "greater than" ws
[Times]      <- ws? "*" ws? / ws "times" ws
[Slash]      <- ws? "/" ws?
[SlashSlash] <- ws? "//" ws? / ws "div" ws
[Percent]    <- ws? "%" ws? / ws "mod" ws
[Plus]       <- ws? "+" ws? / ws "plus" ws
[Minus]      <- ws? "-" ws? / ws "minus" ws
[Bang]       <- ws "not" ws / ws? "!" !ws
[FromSymbol] <- ws "from" ws / "<-"
[After]      <- ws "after" ws / ">" # after or >
[Before]     <- ws "before" ws / "<" # before or <
[In]         <- ws "in" ws / "?" # in or ?
[At]         <- ws "at" ws / "@"
[or]         -- ws "or" ws / ws? "|" ws?
[and]        -- ws "and" ws / ws? "&" ws?

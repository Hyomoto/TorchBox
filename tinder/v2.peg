Line         -> ( Rule / Newline / Comment ) Comment?
Newline      -- ~'\n|\r\n|\r' # newline
Comment      -- "//" ~'[^\n]*'

Rule         -> ( If / EndIf / EndFor / Foreach / Foriter / Forwhile / Condition / From / Import / Const / Interrupt / Goto / Else / Statement ) Comment? Newline
From         <- "from" Identifier "import" Identifier ( "," Identifier )*
Import       <- "import" Identifier ( "as" Identifier )?
Interrupt    <- "catch" String "at"? Identifier
Goto         <- "#" Identifier ( "or" Identifier )?
Foreach      <- "foreach" Identifier ( "," Identifier )? "in" Expression
Foriter      <- "for" Identifier "=" Expression ";" Expression ";" Keyword
Forwhile     <- "for" Expression
Const        <- "const" Identifier ( "is" / "=" ) ( Expression )
Statement    <- Keyword Condition?
If           <- Condition
Else         <- "else" Condition?
EndIf        <- "endif"
EndFor       <- "endfor"

Keyword      -> Call / Write / Put / Set / Inc / Dec / Swap / Input / Yield / Stop / Jump / Return / Break / Continue
Put          <- "put" Expression ( Before / After ) Identifier
Set          <- "set" Identifier ( "," Identifier )* ((Assign / FromSymbol ) Expression ( "," Expression )* )?
Inc          <- "inc" Identifier Expression?
Dec          <- "dec" Identifier Expression?
Swap         <- "swap" Identifier ","? Identifier
Input        <- "input" Expression ( "to" Identifier )?
Write        <- ( String Expression? / "write" Expression ) ( "to" Identifier )?
Yield        <- "yield" ( Expression)?
Stop         <- "stop"
Jump         <- "jump" ( "to" )? Expression
Call         <- "call"? Function
Continue     <- "continue"
Break        <- "break"
Return       <- "return"

Condition    <- "if" Expression
Expression   -> Indirect / Access
Indirect     <- "@" Access
Access       ~> Or (( In / FromSymbol ) Access )?
Or           ~> And ( or And )*
And          ~> Binary ( and Binary )*
Binary       ~> Unary (( EqualEqual / BangEqual / LeftAngleBracketEqual / RightAngleBracketEqual / LeftAngleBracket / RightAngleBracket / Times / SlashSlash / Slash / Plus / Minus ) Unary)*
Unary        ~> ( Bang / Minus )? Primary
Primary      -> Constant / String / Number / Function / Identifier / Table / Array / Group

Group        -> "(" Expression ")"
Array        <- "[" Arguments ","? "]"
Table        <- "{" KeyValuePair ( "," KeyValuePair )* ","? "}"
KeyValuePair <- (Identifier / String) (":" Access)?
Constant     <> True / False
True         <- "True"
False        <- "False"
Function     <- Identifier "(" Arguments? ")"
ws           -- ~'[ \\t]+' # ' ' or '\t'
Arguments    -> Expression ( "," Expression )* 

Identifier   <> ~"[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)*"
String       <> ~'"(?:[^"\\]|\\.)*"' / ~"'(?:[^'\\]|\\.)*'"
Number       <> ~"-?[0-9]+(\\.[0-9]+)?"
[EqualEqual] <- ws? "==" ws? / ws "is" ws
[BangEqual]  <- ws? "!=" ws? / ws "is not" ws
LeftAngleBracketEqual  <- "<="
RightAngleBracketEqual <- ">="
[LeftAngleBracket]     <- ws? "<" ws? / ws "less than" ws
[RightAngleBracket]    <- ws? ">" ws? / ws "greater than" ws
[Times]      <- ws? "*" ws? / ws "times" ws
[Slash]      <- ws? "/" ws?
[SlashSlash] <- ws "div" ws
[Percent]    <- ws? "%" ws? / ws "mod" ws
[Plus]       <- ws? "+" ws? / ws "plus" ws
[Minus]      <- ws? "-" ws? / ws "minus" ws
PlusEquals   <- ws"+="
MinusEquals  <- ws"-="
TimesEquals  <- ws"*="
SlashEquals  <- ws"/="
Assign       <- "to" / "="
[Bang]       <- ws "not" ws / ws? "!" !ws
[FromSymbol] <- ws "from" ws / "<-"
[After]      <- ws "after" ws / ">" ws # after or >
[Before]     <- ws "before" ws / "<" ws # before or <
[In]         <- ws "in" ws / "?" # in or ?
[or]         -- ws "or" ws / ws? "|" ws?
[and]        -- ws "and" ws / ws? "&" ws?